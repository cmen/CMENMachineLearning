<?php

namespace MachineLearning\Util;

include 'Input.php';
include 'Output.php';

/**
 * Class Training
 * @package MachineLearning\Util
 */
class Training
{
    private static $comments = [
        1 => ['input' => '/*
         * This file is part of the Symfony package.
         *
         * (c) Fabien Potencier <fabien@symfony.com>
         *
         * For the full copyright and license information, please view the LICENSE
         * file that was distributed with this source code.
         *
         * Users of PHP 5.2 should be able to run the requirements checks.
         * This is why the file and all classes must be compatible with PHP 5.2+
         * (e.g. not using namespaces and closures).
         *
         * ************** CAUTION **************
         *
         * DO NOT EDIT THIS FILE as it will be overridden by Composer as part of
         * the installation/update process. The original file resides in the
         * SensioDistributionBundle.
         *
         * ************** CAUTION **************
         */', 'output' => 0],
        2 => ['input' => '// Enable APC for autoloading to improve performance.
        // You should change the ApcClassLoader first argument to a unique prefix
        // in order to prevent cache key conflicts with other applications
        // also using APC.
        /*
        $apcLoader = new Symfony\Component\ClassLoader\ApcClassLoader(sha1(__FILE__), $loader);
        $loader->unregister();
        $apcLoader->register(true);
        */', 'output' => 1],
        3 => ['input' => '/**
         * Represents a function template function.
         *
         * Use Twig_SimpleFunction instead.
         *
         * @author Arnaud Le Blanc <arnaud.lb@gmail.com>
         *
         * @deprecated since 1.12 (to be removed in 2.0)
         */', 'output' => 0],
        4 => ['input' => '// $x[3] or $x[] and multidimensional', 'output' => 0],
        5 => ['input' => '//if ($round == 3) { die(\'Round \' . $round);', 'output' => 1],
        6 => ['input' => '//$this->errors[] = $this->language->get(\'errors\');', 'output' => 1],
        7 => ['input' => '// $cfg[\'Servers\'][$i][\'controlhost\'] = \'\'', 'output' => 1],
        8 => ['input' => '//$_SESSION[\'Import_message\'] = $message->getDisplay();', 'output' => 1],
        9 => ['input' => '/**
         * Returns whether this is only an optional recommendation and not a mandatory requirement.
         *
         * @return bool true if optional, false if mandatory
         */', 'output' => 0],
        10 => ['input' => '/* if(defined(\'SESSIONUPLOAD\')) {
            // write session upload
            $sessionUpload = unserialize(SESSIONUPLOAD)
        }*/', 'output' => 1],
        11 => ['input' => '/* mandatory requirements follow */', 'output' => 0],
        12 => ['input' => '// We have server(s) -> apply default configuration', 'output' => 0],
        13 => ['input' => '// Duration = as configured', 'output' => 0],
        14 => ['input' => '//(isset($attribs[\'height\'])?$attribs[\'height\']:1;', 'output' => 1],
        15 => ['input' => '// the PASSWORD() function', 'output' => 0],
        16 => ['input' => '/**
         * @var Composer\Autoload\ClassLoader $loader
         */', 'output' => 0],
        17 => ['input' => '// Prevents duplicate listeners on same event (same instance only)', 'output' => 0],
        18 => ['input' => '//$this->name = parent::getName().md5($this->rootConfig);', 'output' => 1],
        19 => ['input' => '// Higher priority than core MergeCollectionListener so that this one', 'output' => 0],
        20 => ['input' => 'if ($collection instanceof Collection && count($data) === 0) {
            $collection->clear();
        }', 'output' => 1],
        21 => ['input' => '//var_dump($this->getTables());', 'output' => 1],
        22 => ['input' => '/* The <info>%command.name%</info> command clears the application cache for a given environment and debug mode:
              <info>php %command.full_name% --env=dev</info>
              <info>php %command.full_name% --env=prod --no-debug</info> */', 'output' => 0],
    ];

    /**
     * Create training file.
     */
    public function create()
    {
        $input = new Input();
        $lines = [];
        $numComments = 0;
        foreach (self::$comments as $comment) {
            $numComments++;
            $lines[] = $input->getInputFromComment($comment['input']);
            $lines[] = [$comment['output']];
        }

        $file = new \SplFileObject('Data/training', 'w');
        $file->fwrite(implode(' ', [$numComments, Input::NUM_INPUT, Output::NUM_OUTPUT]));
        $file->fwrite(PHP_EOL);

        foreach ($lines as $line) {
            $file->fwrite(implode(' ', $line));
            $file->fwrite(PHP_EOL);
        }

        $file = null;
    }
}
